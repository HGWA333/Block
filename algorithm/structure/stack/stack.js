// 스택(Stack)

// 스택(Stack)과 큐(Queue)는 컴퓨터 공학에서 가장 기본이 되는 자료구조이다.
// 자료구조는 자료를 표현하고 처리하는 방법에 관한 것이라고 볼 수 있다.

// 스택의 필수 개념은 입구와 출구가 하나밖에 없는 상태이다.
// 일직선 방향은 뚫려있지만, 일직선 방향의 반대쪽은 막혀있는 형태로 생각하면 된다.

//  스택의 기본 형태
//    ----------------------------------
//   |
//    ----------------------------------

//  스택에 데이터 1개가 들어가 있는 상태
//    ----------------------------------
//   | 1,
//    ----------------------------------

//  스택에 데이터 2개가 들어가고 있는 상태
//    ----------------------------------
//   | 1, 2,
//    ----------------------------------

//  스택에 데이터 3개가 들어가고 있는 상태
//    ----------------------------------
//   | 1, 2, 5
//    ----------------------------------

//  스택에 데이터 8개가 들어가고 있는 상태
//    ----------------------------------
//   | 1, 2, 5, 3, 4, 6, 7, 8
//    ----------------------------------

//  스택에 데이터 요소 중 데이터 3을 빼기 위한 상황

//  0) 현재 초기 상태. 앞으로 데이터 3을 뺄 것이다.
//    ----------------------------------
//   | 1, 2, 5, 3, 4, 6, 7, 8
//    ----------------------------------

//  1) 데이터 3을 빼는 과정 중 8, 7, 6, 4 순으로 빠진다.
//    ----------------------------------
//   | 1, 2, 5, 3
//    ----------------------------------

//  2) 데이터 3이 빠지고 4, 6, 7, 8 순으로 다시 쌓임
//    ----------------------------------
//   | 1, 2, 5, 4, 6, 7, 8
//    ----------------------------------

// 위에서 보듯 0)에서 1)로 가는 과정 속에서
// 8, 7, 6, 4 데이터가 순차적으로 빠지고 이후 3이 빠진다.
// 이후 앞서 순차적으로 빠진 데이터가 4, 6, 7, 8 순으로 순차적으로 쌓인다.
// 2)를 보면 3이라는 데이터가 빠지고 난 최종상태의 형태이다.

const StackTest = () => {
  function Stack() {}
  const s = Stack();

  s.push(7);
  // s.push()는 Stack()에 삽입
  s.push(5);
  s.push(4);
  s.pop();
  // s.pop()은 push로 쌓인 Stack()에 하나씩 꺼내는 용도
  s.push(6);
  s.pop();

  while (!s.empty()) {
    // !s.empty()는 스택이 빌때까지
    (cout << s.top()) << "";
    // 스택에 가장 위쪽 데이터를 출력한다.
    s.pop();
    // 이후 출력된 데이터를 꺼낸다.
  }
  return 0;
};
