// KMP (Knuth-Morris-Pratt) 알고리즘

// KMP알고리즘은 대표적인 문자열(string) 매칭 알고리즘이다.
// 기본적으로 문자열 매칭 알고리즘이란 '특정한 글이 있을 때 그 글 안에서 하나의 문자열 찾는 알고리즘'이다.
// KMP에 대해서 다루기 전에 먼저 단순 비교 문자열 매칭 알고리즘을 알아볼 필요가 있다.
// 단순 비교 알고리즘은 말 그대로 하나씩 서로 매칭하고 확인하는 알고리즘으로 가장 간단한 형태의 알고리즘이다.

// 단순 비교 문자열 매칭 알고리즘
// 예를 들어 긴 글(Parent)이 목적물 대상이 ABCDEF이고 찾을 문자열이 DEF라면 다음과 같은 방식으로 찾을 수 있다.

// 긴글긴글긴 :   B   |   C   |   D   |   E   |   F   |
// 찾을문자열 :   D   |   E   |       |       |       |

// KMP알고리즘
// 위의 단순 비교 문자열과 같이 단순하게 모든 경우를 다 비교하는 경우에 가장 최악의 경우 엄청난 시간이 소요될 수 있다.
// 예를 들어 길이가 10,000,000가지고 있는 글에서 길이가 1,000 부분 문자열을 찾으려는 경우 연산의 양이 10,000,000,000 10억번을 연산을 한다는 것이다.
// 따라서 모든 경우를 다 비교하지 않아고 부분 문자열을 찾을 수 있는 KMP 알고리즘을 사용해야 한다.

// KMP 알고리즘은 접두사와 접미사의 개념을 활용하여 '반복되는 연산을 얼마나 줄일 수 있는가?'를 판별 하여 매칭할 문자열을 빠르게 점프하는 기법이다.
// 일단 접두사와 접미사는 뜻 그대로 앞에 있는 문자 열과 뒤에 있는 문자열을 의미한다.
// abacaaba가 있을 경우를 예를 들어 보자면 이렇다.

// 접두사 void  접미사
// a b a  c a   a b a

// 이제 작업자가 구해야 할 것은 위와 같이 접두사와 접미사가 일치하는 최대의 길이를 구해야 한다.

// 길이| 문 자 열  | 최대 일치 길이

//   1 | a        | 0
//   2 | ab       | 0
//   3 | aba      | 1
//   4 | abac     | 0
//   5 | abaca    | 1
//   6 | abacaa   | 1
//   7 | abacaab  | 2
//   8 | abacaaba | 3
