// 이분 매칭 (Bipartite Matching)

// 이분 매칭 알고리즘(Bipartite Matching)은 네트워크 플로우(Network Flow) 알고리즘과 개념이 연계 되어있다.
// 이분 매칭은 A 집단이 B 집단을 선택하는 방법에 대한 알고리즘이다.

// 예를 들어 사람이라는 집단을 가진 집합과, 여러대의 노트북이 집합한 두개의 집합이 있다고 가정을 한다.
// 사람의 집합   [재용, 건희, 병철]
// 노트북의 집합 [삼성, 레노버, LG]

// 재용 : 난 삼성, 레노버, LG 노트북을 다 원해
// 건희 : 난 레노버 노트북을 원함
// 병철 : 난 LG 노트북을 원함

// 이 상황을 간선으로 표현하면 이렇다.

// 재용 : 삼성, 레노버, LG
// 건희 : 레노버
// 병철 : LG

// 이때 각 노트북을 선택한 상황을 살펴보면 이렇다.

// 삼성 : 재용,
// 레노버 : 재용, 건희
// LG : 재용, 병철

// 이걸 효과적으로 매칭시켜준다는 말은 '최대 매칭(Max Matching)'을 의미한다.
// 모든 사람이 각각 노트북을 선택하여 가장 많이 연결되는 경우를 찾는 문제이다.

//              재용                삼성

//  시작        건희                레노버          종료

//              병철                LG

// 여기에 각 용량(Capacity)을 1로 설정하여 네트워크 플로우 문제로 이해 할 수 있다. (각 1개씩 선택을 하여 유량은 없음)
// 네트워크 플로우의 에드몬드 카프 알고리즘 시간 복잡도는 O(V * E^2)였다.
// 이것은 이분 매칭에 한해 이것보다 더 빠르고 효율적인 알고리즘을 설계할 수 있고 그건 바로
// 단순한 형태의 깊은 우선 탐색(DFS)로 푸는 방법이다.
