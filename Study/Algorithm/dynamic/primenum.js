// 에라토스테네스의 체의 소수(Prime Number)

// 소수는 양의 약수로 두 개만 가지는 자연수다.
// 예를 들어 2, 3, 5, 7, 11 .... 등 무한히 존재한다.
// 이런 소수를 대량으로 빠르고 정확하게 구하는 방법이 에라토스 테네스의 체다.

function PrimeNum1(_x) {
  for (let i = 2; i < _x; i++) {
    if (_x % i == 0) return false;
  }
  return true;
}

// 위 코드의 소수 판별 알고리즘의 시간 복잡도는 O(N)이다.
// 모든 경우의 수를 다 돌며 약수 여부를 확인하는 코드이다. 그래서 비효율적이다.

// 소수 판별 알고리즘의 시간 복잡도는 O(N^(1/2))로 계산 할 수 있다.
// 왜냐면 예를 들어 8의 경우 2 * 4 = 4 * 2와 같은 식을 대칭을 이루기 때문이다.
// 그러므로 특정한 숫자의 제곱근까지만 약수의 여부를 확인하면 소수 판별 알고리즘의 시간 복잡도는 O(N^(1/2))로 계산 할 수 있다.

function PrimeNum2(_x) {
  let end = sqrt(_x);
  for (let i = 2; i < end; i++) {
    if (_x % i == 0) return false;
  }
  return true;
}

// 위 코드의 시간 복잡도는 O(N^(1/2))
