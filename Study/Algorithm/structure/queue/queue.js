// 큐(Queue)

// 스택(Stack)과 큐(Queue)는 컴퓨터 공학에서 가장 기본이 되는 자료구조이다.
// 자료구조는 자료를 표현하고 처리하는 방법에 관한 것이라고 볼 수 있다.

// 큐의 필수 개념은 가장 먼저 들어온 것이 먼저나가는 (First in First Out, FIFO)구조로
// 선입선출과 같은 개념이다. 예를 들면 먼저 번호표를 뽑은 사람이 먼저 서비스를 이용한다는 것이다.
// 중간에 새치기는 불가능하다는 것이 기본적인 큐의 구조이다.

//  큐의 기본 형태

//    ----------------------------------
//
//    ----------------------------------

//  큐의 기본 형태
//    ----------------------------------
//
//    ----------------------------------

//  큐에 데이터 1개가 들어가 있는 상태
//    ----------------------------------
//    1,
//    ----------------------------------

//  큐에 데이터 2개가 들어가고 있는 상태
//    ----------------------------------
//    1, 2,
//    ----------------------------------

//  큐에 데이터 3개가 들어가고 있는 상태
//    ----------------------------------
//    1, 2, 5
//    ----------------------------------

//  큐에 데이터 8개가 들어가고 있는 상태
//    ----------------------------------
//    1, 2, 5, 3, 4, 6, 7, 8
//    ----------------------------------

//  큐의 데이터 요소 중 데이터 1을 빼기 위한 상황

//  0) 현재 초기 상태. 앞으로 데이터 1을 뺄 것이다.
//    ----------------------------------
//    1, 2, 5, 3, 4, 6, 7, 8
//    ----------------------------------

//  1) 데이터 1이 빠지고 난 이후 상태
//    ----------------------------------
//    2, 5, 3, 4, 6, 7, 8
//    ----------------------------------

const QueTest = () => {
  function Queue() {}
  const q = Queue();

  q.push(7);
  // s.push()는 Queue()에 삽입
  q.push(5);
  q.push(4);
  q.pop();
  // s.pop()은 push로 쌓인 Queue()에 하나씩 꺼내는 용도
  q.push(6);
  q.pop();

  while (!q.empty()) {
    // !q.empty()는 큐가 빌때까지
    (cout << q.top()) << "";
    // 스택에 가장 위쪽 데이터를 출력한다.
    q.pop();
    // 이후 출력된 데이터를 꺼낸다.
  }
  return 0;
};
